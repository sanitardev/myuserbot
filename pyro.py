from pyrogram import Client, filters
from pyrogram.errors import FloodWait, SlowmodeWait
import time as t
from datetime import datetime, timedelta
from pyowm import OWM
import random
import pytz
import sqlite3
from PIL import Image, ImageFilter
import tgcrypto
from gtts import gTTS
from pyrogram.raw import functions
from config import api_id, api_hash, owmtoken
import asyncio
import os
import requests
from ImageParser import YandexImage

app = Client("my_account", api_id, api_hash)

owm = OWM(owmtoken)
owm.config["language"] = "ru"  

@app.on_message(filters.command(["vzlom"], prefixes="."))
async def vzlom(client, message):
		if not message.reply_to_message:
			await app.send_message(message.chat.id, '–≠—Ç–æ –Ω–µ —Ä–µ–ø–ª–∞–π!', reply_to_message_id=message.message_id)
			return
		if message.reply_to_message.from_user.id == 1451300395:
			await app.send_message(message.chat.id, "–ñ–æ–ø—É —Å–æ–∑–¥–∞—Ç–µ–ª—è –Ω–µ–ª—å–∑—è –≤–∑–ª–æ–º–∞—Ç—å!", reply_to_message_id=message.message_id)
			return
		vzlom = await app.send_message(message.chat.id, '–í–∑–ª–æ–º –∂–æ–ø—ã...üåÄ', reply_to_message_id=message.message_id)
		await asyncio.sleep(1)
		await app.edit_message_text(message.chat.id, vzlom.message_id, f'**–ñ–æ–ø–∞ [{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω–∞!**')


@app.on_message(filters.command(["spam"], prefixes=".") & filters.me)
async def spam(client, message):
	text = message.text.split()
	text.remove(".spam")
	count = text[len(text)-1]
	text.remove(text[len(text)-1])
	text_str = ' '.join(text)
	try:
		for spam in range(0, int(count)):
			await app.send_message(message.chat.id, text_str)
	except FloodWait:
		await asyncio.sleep(e.x)

@app.on_message(filters.command(["time"], prefixes="."))
async def time(client, message):
	current_date = datetime.now(pytz.timezone('Europe/Moscow'))
	current_date_string = current_date.strftime('%x %X, %A')
	current_date_string = current_date_string.replace("September", "–°–µ–Ω—Ç—è–±—Ä—å").replace("October", "–û–∫—Ç—è–±—Ä—å").replace("November", "–ù–æ—è–±—Ä—å").replace("December", "–î–µ–∫–∞–±—Ä—å").replace("Januare", "–Ø–Ω–≤–∞—Ä—å").replace("February", "–§–µ–≤—Ä–∞–ª—å").replace("March", "–ú–∞—Ä—Ç").replace("April", "–ê–ø—Ä–µ–ª—å").replace("May", "–ú–∞–π").replace("June", "–ò—é–Ω—å").replace("July", "–ò—é–ª—å").replace("August", "–ê–≤–≥—É—Å—Ç").replace("Monday", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫").replace("Tuesday", "–í—Ç–æ—Ä–Ω–∏–∫").replace("Wednesday", "–°—Ä–µ–¥–∞").replace("Thursday", "–ß–µ—Ç–≤–µ—Ä–≥").replace("Friday", "–ü—è—Ç–Ω–∏—Ü–∞").replace("Saturday", "–°—É–±–±–æ—Ç–∞").replace("Sunday", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
	await app.send_message(message.chat.id, f"**–í—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ: {current_date_string}**", reply_to_message_id=message.message_id)

@app.on_message(filters.command(["weather"], prefixes="."))
async def weather(client, message):
		city = message.text[9:]
		mgr = owm.weather_manager()
		try:
			observation = mgr.weather_at_place(city)
		except BaseException:
			await app.send_message(message.chat.id, "**–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω**", reply_to_message_id=message.message_id)
			return	
		w = observation.weather
		temp = w.temperature('celsius')
		t = temp["temp"]
		noww = w.detailed_status
		await app.send_message(message.chat.id, f'**[{message.from_user.first_name}](tg://user?id={message.from_user.id}), –≤ –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å: {int(t)}¬∞, {noww}.**', reply_to_message_id=message.message_id)

@app.on_message(filters.command(["help"], prefixes="."))
async def help(client, message):
	conn = sqlite3.connect('db.db', check_same_thread=False)
	cursor = conn.cursor()
	cursor.execute("SELECT COUNT(*) FROM stik")
	count = cursor.fetchone()
	await app.send_message(message.chat.id, f'**–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n.vzlom - –≤–∑–ª–∞–º—ã–≤–∞–µ—Ç –∂–æ–ø—É —á–µ–ª–æ–≤–µ–∫–∞ (—Ä–µ–ø–ª–∞–π)\n.time - –≤—Ä–µ–º—è –≤ –º—Å–∫\n.weather (–ì–æ—Ä–æ–¥) - –ø–æ–∫–∞–∑—ã–≤–µ—Ç –∫–∞–∫–∞—è —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ\n.random (–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ) (–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ) - –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –¥–≤—É—Ö —á–∏—Å–µ–ª, —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º\n.shakal (—Ñ–æ—Ç–æ –∏–ª–∏ —Ä–µ–ø–ª–∞–π –Ω–∞ —Ñ–æ—Ç–æ) - —à–∞–∫–∞–ª–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É\n.blur (—Ñ–æ—Ç–æ –∏–ª–∏ —Ä–µ–ø–ª–∞–π –Ω–∞ —Ñ–æ—Ç–æ) - –±–ª—é—Ä–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É\n.pidoras - –∏—â–µ—Ç –ø–∏–¥–æ—Ä–∞—Å–∞ \n.dolbaeb - –∏—â–µ—Ç –¥–æ–ª–±–∞–µ–±–∞\n.click - –∫–ª–∏–∫–µ—Ä\n.font (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç) - –∏–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç\n.say (—Ç–µ–∫—Å—Ç) - —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å\n.grayscale (—Ñ–æ—Ç–æ –∏–ª–∏ —Ä–µ–ø–ª–∞–π –Ω–∞ —Ñ–æ—Ç–æ) - —á–µ—Ä–Ω–æ-–±–µ–ª—ã–π —ç—Ñ—Ñ–µ–∫—Ç\n.stickers - –æ—Ç—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö(–≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {count[0]} —Å—Ç–∏–∫–µ—Ä–æ–≤).\n.photo (—Ç–µ–∫—Å—Ç) - –∏—â–µ—Ç —Ñ–æ—Ç–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É.**', reply_to_message_id=message.message_id)

@app.on_message(filters.command(["random"], prefixes="."))
async def randomchislo(client, message):
	text = message.text.split()
	if len(text) == 3:
		r1 = random.randint(int(text[1]), int(text[2]))
		await app.send_message(message.chat.id, f"–¢–≤–æ–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ: {r1}")
	elif len(text) == 2:
		r2 = random.randint(1, int(text[1]))
		await app.send_message(message.chat.id, f"–¢–≤–æ–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ: {r2}")
	else:
		await app.send_message(message.chat.id, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–∏—Å–µ–ª –∏–ª–∏ –Ω–µ—Ç —á–∏—Å–µ–ª!", reply_to_message_id=message.message_id)


@app.on_message(filters.command(["shakal"], prefixes="."))
async def shakal(client, message):
	size = (128, 128)
	path = "shakal.png"
	if message.reply_to_message:
		try:
			await app.download_media(message.reply_to_message.photo, file_name=path, block=True)
		except AttributeError:
			return await app.send_message(message.chat.id, "–í —Ä–µ–ø–ª–∞–µ –Ω–µ—Ç —Ñ–æ—Ç–æ.")
		original = Image.open("downloads/shakal.png")
		original.thumbnail(size)
		original.save("saved/shakal.png")
		await app.send_photo(message.chat.id, "saved/shakal.png", caption="–í–æ—Ç —Ç–≤–æ–µ —Ñ–æ—Ç–æ:", reply_to_message_id=message.message_id)
		os.remove("downloads/shakal.png")
		os.remove("saved/shakal.png")		
	else:
		try:
			await app.download_media(message.photo, file_name=path, block=True)
		except AttributeError:
			return await app.send_message(message.chat.id, "–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ!")
		original = Image.open("downloads/shakal.png")
		original.thumbnail(size)
		original.save("saved/shakal.png")
		await app.send_photo(message.chat.id, "saved/shakal.png", caption="–í–æ—Ç —Ç–≤–æ–µ —Ñ–æ—Ç–æ:", reply_to_message_id=message.message_id)
		os.remove("downloads/shakal.png")
		os.remove("saved/shakal.png")

@app.on_message(filters.command(["blur"], prefixes="."))
async def blur(client, message):
	path = "shakal.png"
	if message.reply_to_message:
		try:
			await app.download_media(message.reply_to_message.photo, file_name=path, block=True)
		except AttributeError:
			return await app.send_message(message.chat.id, "–í —Ä–µ–ø–ª–∞–µ –Ω–µ—Ç —Ñ–æ—Ç–æ.")
		original = Image.open("downloads/shakal.png")
		blur = original.filter(ImageFilter.GaussianBlur(5))
		blur.save("saved/shakal.png")
		await app.send_photo(message.chat.id, "saved/shakal.png", caption="–í–æ—Ç —Ç–≤–æ–µ —Ñ–æ—Ç–æ:", reply_to_message_id=message.message_id)
		os.remove("downloads/shakal.png")
		os.remove("saved/shakal.png")		
	else:
		try:
			await app.download_media(message.photo, file_name=path, block=True)
		except AttributeError:
			return await app.send_message(message.chat.id, "–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ!")
		original = Image.open("downloads/shakal.png")
		blur = original.filter(ImageFilter.GaussianBlur(5))
		blur.save("saved/shakal.png")
		await app.send_photo(message.chat.id, "saved/shakal.png", caption="–í–æ—Ç —Ç–≤–æ–µ —Ñ–æ—Ç–æ:", reply_to_message_id=message.message_id)
		os.remove("downloads/shakal.png")
		os.remove("saved/shakal.png")

@app.on_message(filters.command(["grayscale"], prefixes="."))
async def grayscale(client, message):
	path = "shakal.png"
	if message.reply_to_message:
		try:
			await app.download_media(message.reply_to_message.photo, file_name=path, block=True)
		except AttributeError:
			return await app.send_message(message.chat.id, "–í —Ä–µ–ø–ª–∞–µ –Ω–µ—Ç —Ñ–æ—Ç–æ.")
		original = Image.open("downloads/shakal.png")
		grayscale = original.convert('L')
		grayscale.save("saved/shakal.png")
		await app.send_photo(message.chat.id, "saved/shakal.png", caption="–í–æ—Ç —Ç–≤–æ–µ —Ñ–æ—Ç–æ:", reply_to_message_id=message.message_id)
		os.remove("downloads/shakal.png")
		os.remove("saved/shakal.png")
	else:
		try:
			await app.download_media(message.photo, file_name=path, block=True)
		except AttributeError:
			return await app.send_message(message.chat.id, "–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ!")
		original = Image.open("downloads/shakal.png")
		grayscale = original.convert('L')
		grayscale.save("saved/shakal.png")
		await app.send_photo(message.chat.id, "saved/shakal.png", caption="–í–æ—Ç —Ç–≤–æ–µ —Ñ–æ—Ç–æ:", reply_to_message_id=message.message_id)
		os.remove("downloads/shakal.png")
		os.remove("saved/shakal.png")

@app.on_message(filters.command(["click"], prefixes="."))
async def bibvitec(client, message):
	conn = sqlite3.connect('db.db', check_same_thread=False)
	cursor = conn.cursor()
	cursor.execute(f'INSERT OR IGNORE INTO click (user_id) VALUES ({message.from_user.id})')
	conn.commit()
	cursor.execute(f"UPDATE click SET balance = balance + 1 WHERE user_id = {message.from_user.id}")
	conn.commit()
	cursor.execute(f"SELECT balance FROM click WHERE user_id = {message.from_user.id}")
	balance = cursor.fetchone()	
	await app.send_message(message.chat.id, f"[{message.from_user.first_name}](tg://user?id={message.from_user.id}) +1! –ù–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É {balance[0]} –∫–ª–∏–∫–æ–≤.", reply_to_message_id=message.message_id)
	
@app.on_message(filters.command(["pidoras"], prefixes="."))
async def pidoras(client, message):
	list1 = []
	async for member in app.iter_chat_members(message.chat.id):
		list1.append(member.user.id)
	pidoras_id = random.choice(list1)
	pidoras = await app.get_users(pidoras_id)
	pidoras_name = pidoras.first_name
	pidor = await app.send_message(message.chat.id, '–ü–æ–∏—Å–∫ –ø–∏–¥–æ—Ä–∞—Å–∞...üåÄ', reply_to_message_id=message.message_id)
	await asyncio.sleep(1)
	await app.edit_message_text(message.chat.id, pidor.message_id, f'**[{pidoras_name}](tg://user?id={pidoras_id}) –ø–∏–¥–æ—Ä–∞—Å!**')


@app.on_message(filters.command(["dolbaeb"], prefixes="."))
async def dolbaeb(client, message):
	list1 = []
	async for member in app.iter_chat_members(message.chat.id):
		list1.append(member.user.id)
	pidoras_id = random.choice(list1)
	pidoras = await app.get_users(pidoras_id)
	pidoras_name = pidoras.first_name
	dolb = await app.send_message(message.chat.id, '–ü–æ–∏—Å–∫ –¥–æ–ª–±–∞–µ–±–∞...üåÄ', reply_to_message_id=message.message_id)
	await asyncio.sleep(1)
	await app.edit_message_text(message.chat.id, dolb.message_id, f'**[{pidoras_name}](tg://user?id={pidoras_id}) –¥–æ–ª–±–∞–µ–±!**')
			 																				   																 					 		   																														    																				   								     
@app.on_message(filters.command(["font"], prefixes="."))
async def font(client, message):
	mes_text = message.text.split()
	mes_text.remove(".font")
	text = ' '.join(mes_text)
	if text == "":
		await app.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç(–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)!", reply_to_message_id=message.message_id)
		return
	replace_text = text.replace("t", "ùï•").replace("e", "ùïñ").replace("x", "ùï©").replace("a", "ùïí").replace("b", "ùïì").replace("c", "ùïî").replace("d", "ùïï").replace("f", "ùïó").replace("g", "ùïò").replace("h", "ùïô").replace("i", "ùïö").replace("j", "ùïõ").replace("k", "ùïú").replace("l", "ùïù").replace("n", "ùïü").replace("m", "ùïû").replace("o", "ùï†").replace("p", "ùï°").replace("q", "ùï¢").replace("r", "ùï£").replace("s", "ùï§").replace("u", "ùï¶").replace("v", "ùïß").replace("w", "ùï®").replace("y", "ùï™").replace("z", "ùï´").replace("A", "ùî∏").replace("B", "ùîπ").replace("C", "‚ÑÇ").replace("D", "ùîª").replace("E", "ùîº").replace("F", "ùîΩ").replace("G", "ùîæ").replace("H", "‚Ñç").replace("I", "ùïÄ").replace("J", "ùïÅ").replace("K", "ùïÇ").replace("L", "ùïÉ").replace("M", "ùïÑ").replace("N", "‚Ñï").replace("O", "ùïÜ").replace("P", "‚Ñô").replace("Q", "‚Ñö").replace("S", "ùïä").replace("R", "‚Ñù").replace("T", "ùïã").replace("U", "ùïå").replace("V", "ùïç").replace("W", "ùïé").replace("X", "ùïè").replace("Y", "ùïê").replace("Z", "‚Ñ§")
	await app.send_message(message.chat.id, f"–í–æ—Ç —Ç–≤–æ–π —Ç–µ–∫—Å—Ç:	`{replace_text}`")

@app.on_message(filters.command(["say"], prefixes="."))
async def say(client, message):
    mes_text = message.text.split()
    mes_text.remove(".say")
    text = ' '.join(mes_text)
    try:
    	tts = gTTS(text, lang='ru')
    except AssertionError:
    	await app.send_audio(message.chat.id, "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑—É—á–∫–∏!")
    tts.save('speech.mp3')
    await app.send_audio(message.chat.id, "speech.mp3", reply_to_message_id=message.message_id, caption="–í–æ—Ç —Ç–≤–æ–µ –∞—É–¥–∏–æ:")

@app.on_message(filters.command(["bibvitec"], prefixes="."))
async def bibvitec(client, message):
    	app.send_message(message.chat.id, "–±–∏–± –≤–∏—Ç–µ–∫ –∫—Ä—É—Ç–æ–π")

@app.on_message(filters.command(["stickers"], prefixes="."))
async def stickers(client, message):
	conn = sqlite3.connect('db.db', check_same_thread=False)
	cursor = conn.cursor()
	cursor.execute(f"SELECT stik_id FROM stik")	
	ids = cursor.fetchall()
	random_ids = random.choice(ids)
	await app.send_sticker(message.chat.id, random_ids[0], reply_to_message_id=message.message_id)

@app.on_message(filters.sticker)
async def stickers(client, message):
	conn = sqlite3.connect('db.db', check_same_thread=False)
	cursor = conn.cursor()
	stik = message.sticker
	idstik = stik.file_id
	cursor.execute(f'INSERT INTO stik (stik_id) VALUES (?)', (idstik,))
	conn.commit()

@app.on_message(filters.command(["photo"], prefixes="."))
async def photo(client, message):
	list1 = []
	parser = YandexImage()
	mes_text = message.text.split()
	mes_text.remove(".photo")
	text = ' '.join(mes_text)
	for item in parser.search(text):
		list1.append(item.url)
	
	try:
		randomurl = random.choice(list1)
	except IndexError:
		await app.send_message(message.chat.id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
		return
	print(randomurl)


app.run()